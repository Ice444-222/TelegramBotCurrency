import asyncio
import configs
import re
import requests
import locale
import math
from aiogram import F, Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from aiogram.filters import CommandStart, Command
from aiogram.utils import markdown
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime,  timedelta
from curs_data import CURS_DATA, CB_ERROR, month_formatter, CURS_MOEX_DATA, day_deleter, check_moex, cb_date, is_valid_date
from curs_data import MoexMethods
import xml.etree.ElementTree as ET
from aiogram.filters import and_f, or_f

locale.setlocale(locale.LC_TIME, 'ru_RU')
storage = MemoryStorage()
bot = Bot(token=configs.TOKEN)
dp = Dispatcher()
valute_id = "GBP"
URL_CB = "https://www.cbr-xml-daily.ru/daily_json.js"
URL_CB_DATE = "https://www.cbr.ru/scripts/XML_daily.asp?date_req={}"
URL_MOEX = "https://iss.moex.com/iss/history/engines/currency/markets/index/boards/FIXI/securities.json?"
URL_MOEX_CHOISE = "https://iss.moex.com/iss/statistics/engines/futures/markets/indicativerates/securities/{}/RUB.json?from={}&till={}&iss.meta=off"

class ClientState(StatesGroup):
    VALUTE = State()
    MAIN_MENU = State()
    DATE = State()
    CALC = State()
    RUB_TO_VAL = State()
    VAL_TO_RUB = State()
    




def get_on_start_kb():
    button_start_all = types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!')
    button_start_choise = types.KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å')
    buttons_row_first = [button_start_all, button_start_choise]
    keyboard = types.ReplyKeyboardMarkup(keyboard=[buttons_row_first], resize_keyboard=True)
    return keyboard

def curs_calculator_kb(current_state):
    button_calc_back = types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã')
    button_calc_menu = types.KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    button_calc_percent = types.KeyboardButton(text='–ü—Ä–∏–±–∞–≤—å 1% –∫ –∫—É—Ä—Å—É –¶–ë!')
    button_calc_date = types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É')
    buttons_row_first = []
    buttons_row_second = [button_calc_percent, button_calc_date]
    buttons_row_third = [button_calc_back, button_calc_menu]
    if current_state != ClientState.RUB_TO_VAL:
        button_calc_ruble_to_valute = types.KeyboardButton(text='–ü–µ—Ä–µ–≤–µ–¥–∏ —Ä—É–±–ª–∏ –≤ –≤–∞–ª—é—Ç—É')
        buttons_row_first.append(button_calc_ruble_to_valute)
    if current_state != ClientState.VAL_TO_RUB:
        button_calc_valute_to_ruble = types.KeyboardButton(text='–ü–µ—Ä–µ–≤–µ–¥–∏ –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏')
        buttons_row_first.append(button_calc_valute_to_ruble)
    keyboard = types.ReplyKeyboardMarkup(keyboard=[buttons_row_first, buttons_row_second, buttons_row_third], resize_keyboard=True)
    return keyboard

def curs_choice_kb():
    buttons = []
    row = []
    for currency_code, data in CURS_DATA.items():
        button = types.KeyboardButton(text=f"{data['Emoji']} {data['Name']}")
        row.append(button)
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    button_choise_menu = types.KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    buttons.append([button_choise_menu])
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

def curs_choise_result_kb(current_state):
    button_choise_result_back = types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã')
    button_choise_result_menu = types.KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    button_choise_result_calc = types.KeyboardButton(text='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
    buttons_row_first = [button_choise_result_back, button_choise_result_menu]
    buttons_row_second = [button_choise_result_calc]
    if current_state == ClientState.VALUTE:
        button_choise_result_date = types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É')
        buttons_row_second.append(button_choise_result_date)
    keyboard = types.ReplyKeyboardMarkup(keyboard=[buttons_row_first, buttons_row_second], resize_keyboard=True)
    return keyboard

def get_curs_all():
    try:
        response_cb_all = requests.get(URL_CB)
    except Exception:
        currency_all_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –¶–ë, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ"
    currency_data_cb_all =""
    currency_all_text = ""

    if response_cb_all and response_cb_all.status_code == 200:
        data_cb_all = response_cb_all.json()
        currency_data_cb_all = data_cb_all.get("Valute", {})
        date_cb = cb_date(data_cb_all)
        currency_all_text = currency_all_text + f"–ö—É—Ä—Å –¶–ë –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞ {month_formatter(date_cb)}\n"
    else:
        currency_all_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –¶–ë, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ'

    for iterator in CURS_DATA:
        smile = CURS_DATA[iterator]['Emoji']
        name = CURS_DATA[iterator]['Name']
        try:
            nominal = currency_data_cb_all[iterator]["Nominal"]
            value_cb = currency_data_cb_all[iterator]['Value'] / nominal
            previous_cb = currency_data_cb_all[iterator]['Previous'] / nominal
            value_cb_diff = value_cb - previous_cb
            value_cb_diff = str(value_cb_diff) + 'üíπ' if value_cb_diff > 0 else str(value_cb_diff) + 'üîª'
        except Exception:
            value_cb = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

                
        currency_all = f"{smile} {name}\n –¶–ë {round(value_cb,2)}({value_cb_diff})\n"
        currency_all_text = currency_all_text + currency_all
    
    return currency_all_text



@dp.message(CommandStart())
async def handle_start(message):
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç ü´° ")
    await message.answer(text=f"–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë üëµ")
    await message.answer(text=f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ —Ç–∞–∫–∂–µ —É–≤–∏–¥–µ—Ç—å –∫—É—Ä—Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂—ã –µ—Å–ª–∏ –¥–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Ç–∞–º —Ç–æ—Ä–≥—É–µ—Ç—Å—è. ü§ë", reply_markup=get_on_start_kb())

@dp.message(F.photo)
async def handle_photo(message):
    await message.answer(text="bro whaat")

@dp.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!')
@dp.message(Command("curs_all"))
async def handle_curs(message):
    await message.answer(text=get_curs_all(), reply_markup=get_on_start_kb())

@dp.message(F.text == '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å')
@dp.message(Command("curs"))
async def handle_curs(message):
    await message.answer(text='–í—ã–±–∏—Ä–∞–π—Ç–µ!', reply_markup=curs_choice_kb())

@dp.message(F.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@dp.message(Command("back"))
async def handle_start(message, state):
    await state.set_state(ClientState.MAIN_MENU)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', reply_markup=get_on_start_kb())

@dp.message(lambda message: any(re.search(r'\b{}\b'.format(re.escape(message.text.casefold())), data['Name'].casefold()) for data in CURS_DATA.values()))
@dp.message(lambda message: any(f"{data['Emoji']} {data['Name']}" in message.text for data in CURS_DATA.values()))
async def handle_currency_choice(message: types.Message, state: FSMContext):
    currency_choise_text=''
    response_moex=''
    moex_message=''

    
    for currency_code, data in CURS_DATA.items():
        if re.search(r'\b{}\b'.format(re.escape(message.text.casefold())), data['Name'].casefold()) or message.text.split()[0] in data['Emoji']:
            currency_choise = currency_code
            await state.set_state(ClientState.VALUTE)
            await state.update_data(VALUTE=currency_choise)
            await state.update_data(SYMBOL=data['Symbol'])
            try:
                response_cb_all = requests.get(URL_CB)
            except Exception:
                currency_choise_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –¶–ë, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ'
            if response_cb_all and response_cb_all.status_code == 200:
                data_cb_all = response_cb_all.json()
                nominal = data_cb_all.get("Valute").get(currency_choise).get("Nominal")
                value_cb = data_cb_all.get("Valute").get(currency_choise).get('Value')/nominal
                value_cb_prev = data_cb_all.get("Valute", {}).get(currency_choise).get('Previous') / nominal
                await state.update_data(VALUE_CB=value_cb)
                value_cb_diff = (value_cb - value_cb_prev)
                if value_cb_diff > 0:
                    smile = "üíπ"
                    sign = "+"
                else:
                    smile = "üîª"
                    sign = ""
                date_cb = cb_date(data_cb_all)
                currency_choise_text = f"–ö—É—Ä—Å –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§:\n{round(value_cb,3)}({sign}{round(value_cb_diff,5)}{smile})\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{month_formatter(date_cb)}\n"
            else:
                currency_choise_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –¶–ë, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ'
            if data['MOEX'] == True:
                try:
                    response_moex = MoexMethods.get_moex_repsonse(URL_MOEX_CHOISE, currency_choise)
                except Exception:
                    moex_message = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ (–±—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)'
                if response_moex and response_moex.status_code == 200:
                    response_moex = response_moex.json()
                    last_element_value = response_moex.get("securities").get("data")[-1][3]
                    value_moex = response_moex.get("securities.current").get("data")[0][3]
                    if last_element_value == value_moex:
                        value_moex_prev = response_moex.get("securities").get("data")[-2][3]
                    else:
                        value_moex_prev = last_element_value
                    value_moex_diff = value_moex - value_moex_prev
                    if value_moex_diff > 0:
                        smile = "üíπ"
                        sign = "+"
                    else:
                        smile = "üîª"
                        sign = ""
                    date_moex = response_moex.get("securities.current").get("data")[0][1]
                    time_moex = response_moex.get("securities.current").get("data")[0][2][:5]
                    moex_message = f"–ö—É—Ä—Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–∏:\n{round(value_moex,3)}({sign}{round(value_moex_diff,5)}{smile})\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n{time_moex} –º—Å–∫ {month_formatter(date_moex)}"
                else:
                    moex_message = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ (–±—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)'
            else:
                moex_message = '–í–∞–ª—é—Ç–∞ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–µ.'

    await message.answer(text=f"{moex_message}\n\n{currency_choise_text}", reply_markup=curs_choise_result_kb(ClientState.VALUTE))

@dp.message(and_f(or_f(ClientState.VALUTE, ClientState.CALC), F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É'))
async def handle_curs_date_response(message, state):
    await state.set_state(ClientState.DATE)
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=curs_choise_result_kb(ClientState.DATE))

@dp.message(F.text == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã')
async def handle_curs_date_response(message):
    await message.answer(text="–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–∑–∞–¥.", reply_markup=curs_choice_kb())

@dp.message (and_f(or_f(ClientState.VALUTE, ClientState.DATE), F.text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'))
async def handle_curs_date_response(message, state):
    await state.set_state(ClientState.CALC)
    await message.answer(text="–°—á–∏—Ç–∞—é", reply_markup=curs_calculator_kb(ClientState.CALC))

@dp.message(ClientState.DATE,)
async def handle_curs_date_response(message, state):
    user_input = message.text
    if is_valid_date(user_input):
        user_input_slash=user_input.replace('.','/')
        valute_data = await state.get_data()
        user_choise = valute_data['VALUTE']
        value_cb = valute_data['VALUE_CB']
        url_find = ("./Valute[CharCode='{}']/VunitRate").format(user_choise)
        url_request = (URL_CB_DATE).format(user_input_slash)
        await state.update_data(selected_date=user_input_slash)
        try:
            response_cb_all = float(ET.fromstring(requests.get(url_request).text).find(url_find).text.replace(',','.'))
            difference = int(round(((value_cb*1000)/(response_cb_all*1000)-1)*100,0))
            difference_text = "C –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∫—É—Ä—Å {} –Ω–∞ {}%{}"
            if difference > 0:
                result = '—É–≤–µ–ª–∏—á–∏–ª—Å—è'
                smile="üíπ"
            elif difference < 0:
                result = '—É–º–µ–Ω—å—à–∏–ª—Å—è'
                difference*=-1
                smile="üîª"
            else:
                difference_text = '–∫—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è'
            await message.answer(f"–ö—É—Ä—Å –Ω–∞ {user_input}: {response_cb_all}\n{difference_text.format(result,difference,smile)}")
        except Exception:
            await message.answer("–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§ –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¶–ë –†–§ –µ—â—ë —É–∫–∞–∑—ã–≤–∞–ª –∫—É—Ä—Å –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É.")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.\n–ù–∞–ø—Ä–∏–º–µ—Ä 05.12.2006")

@dp.message(and_f(or_f(ClientState.CALC, ClientState.VAL_TO_RUB, ClientState.RUB_TO_VAL), F.text == '–ü—Ä–∏–±–∞–≤—å 1% –∫ –∫—É—Ä—Å—É –¶–ë!'))
async def handle_curs_date_response(message, state):
    await state.set_state(ClientState.CALC)
    valute_data = await state.get_data()
    value_cb = valute_data['VALUE_CB']
    value_percent = value_cb*101/100
    await message.answer(text=f"–ì–æ—Ç–æ–≤–æ! {value_cb} => {round(value_percent,4)}", reply_markup=curs_calculator_kb(ClientState.CALC))

@dp.message(and_f(or_f(ClientState.CALC, ClientState.RUB_TO_VAL), F.text == '–ü–µ—Ä–µ–≤–µ–¥–∏ –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏'))
async def handle_curs_date_response(message, state):
    await state.set_state(ClientState.VAL_TO_RUB)
    await message.answer(text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã", reply_markup=curs_calculator_kb(ClientState.VAL_TO_RUB))

@dp.message(and_f(or_f(ClientState.CALC, ClientState.VAL_TO_RUB), F.text == '–ü–µ—Ä–µ–≤–µ–¥–∏ —Ä—É–±–ª–∏ –≤ –≤–∞–ª—é—Ç—É'))
async def handle_curs_date_response(message, state):
    await state.set_state(ClientState.RUB_TO_VAL)
    await message.answer(text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π", reply_markup=curs_calculator_kb(ClientState.RUB_TO_VAL))

@dp.message(or_f(ClientState.VAL_TO_RUB,ClientState.RUB_TO_VAL))
async def handle_curs_date_response(message, state):
    current_state = await state.get_state()
    valute_data = await state.get_data()
    value_cb = valute_data['VALUE_CB']
    symbol = valute_data['SYMBOL']
    text_without_commas = message.text.replace(',','.')
    if text_without_commas.isdigit() or text_without_commas.replace('.', '', 1).isdigit():
        if current_state == ClientState.VAL_TO_RUB:
            value = float(text_without_commas) * value_cb
            main_symbol = symbol
            second_symbol = '‚ÇΩ'
        else:
            value = float(text_without_commas) / value_cb
            main_symbol = '‚ÇΩ'
            second_symbol = symbol   
    else:
        value = f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ."
    await message.answer(text=f"{text_without_commas}{main_symbol} —ç—Ç–æ {round(value,2)}{second_symbol}", reply_markup=curs_calculator_kb(current_state))




async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

asyncio.run(main())

